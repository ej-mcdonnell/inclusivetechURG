
#ifndef _IndepentdentStudyUI_IndepentdentStudyUI_h
#define _IndepentdentStudyUI_IndepentdentStudyUI_h


/*
 * IndepentdentStudyUI.h -- part of the IndepentdentStudyUI project.
 * Declarations for everything that was generated...
 * Emma McDonnell
 * Northwestern University https://github.com/ej-mcdonnell
 * 
 * Copyright (C) 2017 Emma McDonnell
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "ba95b28a789c481fb331c26c854e8d00M1JIfoUoZr",
 * aka IndepentdentStudyUI.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2017 Pat Deegan 
 * [http://psychogenic.com/ | http://flyingcarsandstuff.com/]
 * and distributed under the terms of their respective licenses.
 * See http://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */



/* we need the SerialUI lib */
#include <SerialUI.h>


/* MySUI
 * Our SerialUI Instance, through which we can send/receive
 * data from users.
 */ 
extern SUI::SerialUI MySUI;






/*
 * The container for MyInputs, which
 * holds all the variables for the various inputs.
 */
typedef struct MyInputsContainerStruct {
	
	long int MotorNumber;
	bool MotorOn;
	long int MotorIntensity;
	long int MotorPattern;
	// constructor to set sane startup vals
	MyInputsContainerStruct() : 
		MotorNumber(1),
		MotorOn(false),
		MotorIntensity(0),
		MotorPattern(1)
	{}
} MyInputsContainerSt;

extern MyInputsContainerSt MyInputs;


/* MyTracked
 * A structure to hold the tracked variables, which will 
 * automatically update the druid UI when modified by this 
 * program.
 */
typedef struct MyTrackedVarsContainerStruct{
	
	unsigned long Strength1;
	::String Pattern1;
	bool Motor2On;
	unsigned long Strength2;
	bool Motor1On;
	::String Pattern2;
	// constructor to set sane startup vals
	MyTrackedVarsContainerStruct() : 
	Strength1(0),
	Pattern1(""),
	Motor2On(false),
	Strength2(0),
	Motor1On(false),
	Pattern2("")
	{}
} MyTrackedVarsContainerSt;

extern MyTrackedVarsContainerSt MyTracked;




/* ********* callbacks and validation functions ********* */



/* *** Main Menu *** */
namespace MainMenu {

void MotorNumberChanged();

void MotorOnChanged();

void MotorIntensityChanged();

void MotorPatternChanged();

void doGo();

} /* namespace MainMenu */



/* ***** SetupSerialUI: where we'll be setting up menus and such **** */
bool SetupSerialUI();


#define DIE_HORRIBLY(msg)	for(;;){ MySUI.println(msg); delay(1000); }


#endif
