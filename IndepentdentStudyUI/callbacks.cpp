

/*
 * callbacks.cpp -- part of the IndepentdentStudyUI project.
 * Implementation of callbacks -- YOUR code goes here!
 * Emma McDonnell
 * Northwestern University https://github.com/ej-mcdonnell
 * 
 * Copyright (C) 2017 Emma McDonnell
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "ba95b28a789c481fb331c26c854e8d00M1JIfoUoZr",
 * aka IndepentdentStudyUI.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2017 Pat Deegan 
 * [http://psychogenic.com/ | http://flyingcarsandstuff.com/]
 * and distributed under the terms of their respective licenses.
 * See http://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */


/* we need the SerialUI lib */
#include <SerialUI.h>
#include "IndepentdentStudyUISettings.h"

/* our project specific types and functions are here */
#include "IndepentdentStudyUI.h"



/* 
 * In addition to any custom globals you declared,
 * here you have access to:
 * 
 * *** MySUI -- the SerialUI instance.
 * Use it as you would the Serial device, e.g.
 * 	MySUI.println(F("Helloooo..."));
 * 	
 * 	
 * *** MyInputs -- a container for 
 * values submitted by users. Contents:
 *  
 *    MyInputs.MotorNumber (long int)
 *    MyInputs.MotorOn (bool)
 *    MyInputs.MotorIntensity (long int)
 *    MyInputs.MotorPattern (long int)
 *  
 *  
 *  
 * *** MyTracked -- a container for values tracked
 * by druid and displayed to users in "state" pane.  Changes to:
 * 
 *    MyTracked.Strength1 (unsigned long)
 *    MyTracked.Pattern1 (::String)
 *    MyTracked.Motor2On (bool)
 *    MyTracked.Strength2 (unsigned long)
 *    MyTracked.Motor1On (bool)
 *    MyTracked.Pattern2 (::String)
 * 
 * will automatically be reported to the UI, on the next refresh/ping.
 * 
 * 
 */

// custom declarations
void FAlwaysOn(int n, int val){
	analogWrite(n, val);
}

void FQuickPulse(int n, int val){
	for(int i = 0; i <2000; i++){
  	analogWrite(n, val);
  	delay(150);
  	analogWrite(n, 0);
  	delay(150);
	}
}

void FSlowPulse(int n, int val){
  for(int i = 0; i <2000; i++){
  	analogWrite(n, val);
  	delay(250);
  	analogWrite(n, 0);
  	delay(750);
  }
}

void FIntermittentIndicator(int n, int val){
  for(int i = 0; i <2000; i++){
  	analogWrite(n, val);
  	delay(250);
  	analogWrite(n, 0);
  	delay(4000);
  }
}

void FFrequentIndicator(int n, int val){
  for(int i = 0; i <2000; i++){
  	analogWrite(n, val);
  	delay(250);
  	analogWrite(n, 0);
  	delay(2000);
  }
}

void WriteToMotors(int cm, int ci, int cp){
//  switch(cp){
//    case '1':
//      FAlwaysOn(cm, ci);
//      break;
//    case '2':
//      FQuickPulse(cm, ci);
//      break;
//    case'3':
//      FSlowPulse(cm, ci);
//      break;
//    case '4':
//      FIntermittentIndicator(cm, ci);
//      break;
//    case '5':
//      FFrequentIndicator(cm, ci);
//      break;
//    default:
//      FAlwaysOn(cm, ci);
//      break;
//  

 if(cp == 1){
  //while(cp ==1){
    FAlwaysOn(cm, ci);
  //}
 }
 else if (cp == 2){
  //while(cp==2){
    FQuickPulse(cm, ci);
  //}
 }
 else if(cp ==3){
  //while(cp==3){
    FSlowPulse(cm, ci);
  //}
 }
 else if(cp==4){
  //while(cp==4){
    FIntermittentIndicator(cm, ci);
  //}
 }
 else if(cp ==5){
  //while(cp==5){
    FFrequentIndicator(cm, ci);
  //}
 }
 else{
  MySUI.print("pattern not understood");
 }
}
int currentMotorID(int cm){
  int mn;
//  switch(cm){
//    case '1':
//      mn =11;
//      break;
//    case '2':
//      mn = 10;
//      break;
//    case '3':
//      mn=9;
//      break;
//    case '4':
//      mn=6;
//      break;
//    case '5':
//      mn=5;
//      break;
//    case '6':
//      mn = 4;
//      break;
//    
//  }
  if(cm ==1){
    mn =11;
  }
  else if(cm == 2){
    mn = 10;
  }
  else if(cm == 3){
    mn=9;
  }
  else if(cm ==4){
    mn=6;
  }
  else if(cm ==5){
    mn =5;
  }
  else if(cm == 6){
    mn =4;
  }
  else{
    MySUI.print("motor number not understood");
  }
  return mn;
}




/* ********* callbacks and validation functions ********* */



/* *** Main Menu *** */
namespace MainMenu {


void MotorNumberChanged() {

    /* Motor Number value was modified.
    * It is a long int accessible in MyInputs.MotorNumber
    */
    MySUI.print(F("Motor Number is now:"));
    MySUI.println(MyInputs.MotorNumber);

}

void MotorOnChanged() {

    /* Motor On value was modified.
    * It is a bool accessible in MyInputs.MotorOn
    */
    MySUI.print(F("Motor On is now:"));
    MySUI.println(MyInputs.MotorOn ? F("ON") : F("OFF"));

}

void MotorIntensityChanged() {

    /* MotorIntensity value was modified.
    * It is a long int accessible in MyInputs.MotorIntensity
    */
    MySUI.print(F("MotorIntensity is now:"));
    MySUI.println(MyInputs.MotorIntensity);

}

void MotorPatternChanged() {

    /* Motor Pattern value was modified.
    * It is a long int accessible in MyInputs.MotorPattern
    */
    MySUI.print(F("Motor Pattern is now:"));
    MySUI.println(MyInputs.MotorPattern);

}

void doGo() {
int cm = currentMotorID(MyInputs.MotorNumber);
MySUI.print(F("CM ="));
MySUI.print(cm);

long cp = MyInputs.MotorPattern;
MySUI.print(F("CP ="));
MySUI.println(cp);

int ci = MyInputs.MotorIntensity;


bool motorOn = MyInputs.MotorOn;


if(!motorOn){
	analogWrite(cm, 0);
}
else{
  WriteToMotors(cm, ci, cp);
}


//else if(cp ==1){
//  FAlwaysOn(cm, ci);
//}
//else if(cp == 2){
//  FQuickPulse(cm, ci);
//}
//else if(cp == 3){
//  FSlowPulse(cm, ci);
//}
//else if(cp==4){
//  FIntermittentIndicator(cm, ci);
//}
//else if(cp == 5){
//  FFrequentIndicator(cm, ci);
//}
//else{
//  FAlwaysOn(cm, ci);
//}
//else{
//	switch(currPattern){	
//		case '1':
//			FAlwaysOn(currMotor, currIntensity);
//			break;
//		case '2':
//			FQuickPulse(currMotor, currIntensity);
//			break;
//		case '3':
//			FSlowPulse(currMotor, currIntensity);
//			break;
//		case '4':
//			FIntermittentIndicator(currMotor, currIntensity);
//			break;
//		case '5':
//			FFrequentIndicator(currMotor, currIntensity);
//			break;
//		default:
//			FAlwaysOn(currMotor, currIntensity);
//			break;
//	
//	}



}







} /* namespace MainMenu */





